from sqlalchemy import create_engine
from sqlalchemy.orm import DeclarativeBase, sessionmaker
from typing import Optional
import threading

class DatabaseConfig:
    def __init__(self):
        self._engine: Optional[create_engine] = None
        self._session_local: Optional[sessionmaker] = None
        self._lock = threading.Lock()

    @property
    def engine(self) -> create_engine:
        """Lazy initialize the database engine"""
        if not self._engine:
            with self._lock:
                if not self._engine:
                    DATABASE_URL = get_database_url()
                    self._engine = create_engine(
                        DATABASE_URL,
                        pool_pre_ping=True,
                        pool_recycle=3600
                    )
        return self._engine

    @property
    def SessionLocal(self) -> sessionmaker:
        """Lazy initialize the session maker"""
        if not self._session_local:
            with self._lock:
                if not self._session_local:
                    self._session_local = sessionmaker(
                        autocommit=False,
                        autoflush=False,
                        bind=self.engine
                    )
        return self._session_local

db_config = DatabaseConfig()

class Base(DeclarativeBase):
    pass

def create_postgres_tables():
    """Create tables using the lazy-initialized engine"""
    Base.metadata.create_all(bind=db_config.engine)

# Usage examples:
# Get a database connection
connection = db_config.engine.connect()

# Create a session
session = db_config.SessionLocal()
