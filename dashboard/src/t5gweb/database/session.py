"""Database session and connection management"""

import threading
from typing import Optional

from sqlalchemy import URL, create_engine
from sqlalchemy.orm import DeclarativeBase, sessionmaker
from t5gweb.utils import set_cfg


class DatabaseConfig:
    def __init__(self):
        self._engine: Optional[create_engine] = None
        self._session_local: Optional[sessionmaker] = None
        self._lock = threading.Lock()

    @staticmethod
    def get_execution_context():
        """Detect if running in Celery worker
        Generated by Claude Code
        """
        import os

        # Check for Celery worker environment variables
        if any(key in os.environ for key in ["CELERY_WORKER_PROCESS", "C_FORCE_ROOT"]):
            return "celery"
        # Check if current process name contains celery
        import sys

        if "celery" in sys.argv[0].lower():
            return "celery"
        return "web"

    @staticmethod
    def get_database_url():
        cfg = set_cfg()
        """Build database URL from configuration"""
        url_object = URL.create(
            "postgresql+psycopg",
            username=cfg["POSTGRESQL_USER"],
            password=cfg["POSTGRESQL_PASSWORD"],
            host=cfg["POSTGRESQL_HOSTNAME"],
            port=cfg["POSTGRESQL_PORT"],
            database=cfg["POSTGRESQL_DATABASE"],
        )
        return url_object

    @property
    def engine(self) -> create_engine:
        """Lazy initialize the database engine"""
        if not self._engine:
            with self._lock:
                if not self._engine:
                    DATABASE_URL = self.get_database_url()
                    self._engine = create_engine(
                        DATABASE_URL,
                        pool_pre_ping=True,
                        pool_recycle=3600,
                        connect_args={"connect_timeout": 10},
                    )
        return self._engine

    def SessionLocal(self):
        """Create a new database session - context aware"""
        if self.get_execution_context() == "celery":
            # Return fresh session for Celery workers (non-scoped)
            sessionmaker_class = sessionmaker(
                autocommit=False, autoflush=False, bind=self.engine
            )
            return sessionmaker_class()
        else:
            # Return session from cached sessionmaker for web requests (scoped)
            if not self._session_local:
                with self._lock:
                    if not self._session_local:
                        self._session_local = sessionmaker(
                            autocommit=False, autoflush=False, bind=self.engine
                        )
            return self._session_local()


db_config = DatabaseConfig()


class Base(DeclarativeBase):
    pass


def create_postgres_tables():
    Base.metadata.create_all(bind=db_config.engine)
